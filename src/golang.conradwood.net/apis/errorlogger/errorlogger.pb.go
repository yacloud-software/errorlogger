// Code generated by protoc-gen-go.
// source: protos/golang.conradwood.net/apis/errorlogger/errorlogger.proto
// DO NOT EDIT!

/*
Package errorlogger is a generated protocol buffer package.

It is generated from these files:
	protos/golang.conradwood.net/apis/errorlogger/errorlogger.proto

It has these top-level messages:
	ProtoLog
	ErrorLogRequest
	ReadLogRequest
*/
package errorlogger

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import auth "golang.conradwood.net/apis/auth"
import framework "golang.conradwood.net/apis/framework"
import goeasyops "golang.conradwood.net/apis/goeasyops"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProtoLog struct {
	Err     *ErrorLogRequest `protobuf:"bytes,1,opt,name=Err" json:"Err,omitempty"`
	User    *auth.User       `protobuf:"bytes,2,opt,name=User" json:"User,omitempty"`
	Service *auth.User       `protobuf:"bytes,3,opt,name=Service" json:"Service,omitempty"`
}

func (m *ProtoLog) Reset()                    { *m = ProtoLog{} }
func (m *ProtoLog) String() string            { return proto.CompactTextString(m) }
func (*ProtoLog) ProtoMessage()               {}
func (*ProtoLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProtoLog) GetErr() *ErrorLogRequest {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *ProtoLog) GetUser() *auth.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ProtoLog) GetService() *auth.User {
	if m != nil {
		return m.Service
	}
	return nil
}

type ErrorLogRequest struct {
	UserID         string                              `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	ServiceName    string                              `protobuf:"bytes,2,opt,name=ServiceName" json:"ServiceName,omitempty"`
	MethodName     string                              `protobuf:"bytes,3,opt,name=MethodName" json:"MethodName,omitempty"`
	Timestamp      uint32                              `protobuf:"varint,4,opt,name=Timestamp" json:"Timestamp,omitempty"`
	ErrorCode      uint32                              `protobuf:"varint,5,opt,name=ErrorCode" json:"ErrorCode,omitempty"`
	ErrorMessage   string                              `protobuf:"bytes,6,opt,name=ErrorMessage" json:"ErrorMessage,omitempty"`
	LogMessage     string                              `protobuf:"bytes,7,opt,name=LogMessage" json:"LogMessage,omitempty"`
	Messages       []*framework.FrameworkMessageDetail `protobuf:"bytes,8,rep,name=Messages" json:"Messages,omitempty"`
	RequestID      string                              `protobuf:"bytes,9,opt,name=RequestID" json:"RequestID,omitempty"`
	CallingService *auth.User                          `protobuf:"bytes,10,opt,name=CallingService" json:"CallingService,omitempty"`
	Errors         *goeasyops.GRPCErrorList            `protobuf:"bytes,11,opt,name=Errors" json:"Errors,omitempty"`
}

func (m *ErrorLogRequest) Reset()                    { *m = ErrorLogRequest{} }
func (m *ErrorLogRequest) String() string            { return proto.CompactTextString(m) }
func (*ErrorLogRequest) ProtoMessage()               {}
func (*ErrorLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ErrorLogRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ErrorLogRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ErrorLogRequest) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *ErrorLogRequest) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ErrorLogRequest) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ErrorLogRequest) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *ErrorLogRequest) GetLogMessage() string {
	if m != nil {
		return m.LogMessage
	}
	return ""
}

func (m *ErrorLogRequest) GetMessages() []*framework.FrameworkMessageDetail {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ErrorLogRequest) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *ErrorLogRequest) GetCallingService() *auth.User {
	if m != nil {
		return m.CallingService
	}
	return nil
}

func (m *ErrorLogRequest) GetErrors() *goeasyops.GRPCErrorList {
	if m != nil {
		return m.Errors
	}
	return nil
}

type ReadLogRequest struct {
	LogsToSend uint32   `protobuf:"varint,1,opt,name=LogsToSend" json:"LogsToSend,omitempty"`
	Services   []string `protobuf:"bytes,2,rep,name=Services" json:"Services,omitempty"`
}

func (m *ReadLogRequest) Reset()                    { *m = ReadLogRequest{} }
func (m *ReadLogRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadLogRequest) ProtoMessage()               {}
func (*ReadLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReadLogRequest) GetLogsToSend() uint32 {
	if m != nil {
		return m.LogsToSend
	}
	return 0
}

func (m *ReadLogRequest) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

func init() {
	proto.RegisterType((*ProtoLog)(nil), "errorlogger.ProtoLog")
	proto.RegisterType((*ErrorLogRequest)(nil), "errorlogger.ErrorLogRequest")
	proto.RegisterType((*ReadLogRequest)(nil), "errorlogger.ReadLogRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ErrorLogger service

type ErrorLoggerClient interface {
	// log an error
	Log(ctx context.Context, in *ErrorLogRequest, opts ...grpc.CallOption) (*common.Void, error)
	//  rpc SendToServer(stream PingRequest) returns (PingResponse);
	ReadLog(ctx context.Context, in *ReadLogRequest, opts ...grpc.CallOption) (ErrorLogger_ReadLogClient, error)
}

type errorLoggerClient struct {
	cc *grpc.ClientConn
}

func NewErrorLoggerClient(cc *grpc.ClientConn) ErrorLoggerClient {
	return &errorLoggerClient{cc}
}

func (c *errorLoggerClient) Log(ctx context.Context, in *ErrorLogRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/errorlogger.ErrorLogger/Log", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errorLoggerClient) ReadLog(ctx context.Context, in *ReadLogRequest, opts ...grpc.CallOption) (ErrorLogger_ReadLogClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ErrorLogger_serviceDesc.Streams[0], c.cc, "/errorlogger.ErrorLogger/ReadLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &errorLoggerReadLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ErrorLogger_ReadLogClient interface {
	Recv() (*ProtoLog, error)
	grpc.ClientStream
}

type errorLoggerReadLogClient struct {
	grpc.ClientStream
}

func (x *errorLoggerReadLogClient) Recv() (*ProtoLog, error) {
	m := new(ProtoLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ErrorLogger service

type ErrorLoggerServer interface {
	// log an error
	Log(context.Context, *ErrorLogRequest) (*common.Void, error)
	//  rpc SendToServer(stream PingRequest) returns (PingResponse);
	ReadLog(*ReadLogRequest, ErrorLogger_ReadLogServer) error
}

func RegisterErrorLoggerServer(s *grpc.Server, srv ErrorLoggerServer) {
	s.RegisterService(&_ErrorLogger_serviceDesc, srv)
}

func _ErrorLogger_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorLoggerServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/errorlogger.ErrorLogger/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorLoggerServer).Log(ctx, req.(*ErrorLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErrorLogger_ReadLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ErrorLoggerServer).ReadLog(m, &errorLoggerReadLogServer{stream})
}

type ErrorLogger_ReadLogServer interface {
	Send(*ProtoLog) error
	grpc.ServerStream
}

type errorLoggerReadLogServer struct {
	grpc.ServerStream
}

func (x *errorLoggerReadLogServer) Send(m *ProtoLog) error {
	return x.ServerStream.SendMsg(m)
}

var _ErrorLogger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "errorlogger.ErrorLogger",
	HandlerType: (*ErrorLoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Log",
			Handler:    _ErrorLogger_Log_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadLog",
			Handler:       _ErrorLogger_ReadLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/golang.conradwood.net/apis/errorlogger/errorlogger.proto",
}

func init() {
	proto.RegisterFile("protos/golang.conradwood.net/apis/errorlogger/errorlogger.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0xdf, 0x6f, 0xd3, 0x30,
	0x10, 0x56, 0x96, 0xd1, 0xb5, 0x97, 0x6d, 0x48, 0x96, 0x40, 0x56, 0x99, 0xa6, 0x52, 0x21, 0x54,
	0xf1, 0x90, 0x8e, 0xc2, 0x2b, 0x9a, 0x44, 0x3b, 0xd0, 0xa4, 0x0e, 0x4d, 0xde, 0xe0, 0xdd, 0x34,
	0x87, 0x17, 0xd1, 0xe4, 0x8a, 0x9d, 0x31, 0xf1, 0x06, 0xff, 0x10, 0x7f, 0x23, 0xb2, 0xe3, 0x34,
	0xee, 0x26, 0x55, 0xbc, 0x24, 0xe7, 0xcf, 0xdf, 0x77, 0x77, 0xbe, 0x1f, 0x70, 0xba, 0xd2, 0x54,
	0x91, 0x19, 0x2b, 0x5a, 0xca, 0x52, 0xa5, 0x0b, 0x2a, 0xb5, 0xcc, 0xee, 0x88, 0xb2, 0xb4, 0xc4,
	0x6a, 0x2c, 0x57, 0xb9, 0x19, 0xa3, 0xd6, 0xa4, 0x97, 0xa4, 0x14, 0xea, 0xd0, 0x4e, 0x9d, 0x92,
	0x25, 0x01, 0xd4, 0x4f, 0xb7, 0xb8, 0x59, 0x50, 0x51, 0x50, 0xe9, 0x7f, 0xb5, 0xb8, 0xff, 0x6a,
	0x0b, 0x5f, 0xde, 0x56, 0x37, 0xee, 0xe3, 0xb9, 0x6f, 0xb7, 0x70, 0xbf, 0x69, 0x59, 0xe0, 0x1d,
	0xe9, 0xef, 0xad, 0xf5, 0x1f, 0x2a, 0x45, 0x28, 0xcd, 0x2f, 0x5a, 0x05, 0x56, 0xad, 0x1a, 0xfe,
	0x8e, 0xa0, 0x7b, 0x69, 0xad, 0x39, 0x29, 0x96, 0x42, 0x7c, 0xa6, 0x35, 0x8f, 0x06, 0xd1, 0x28,
	0x99, 0x1c, 0xa5, 0x61, 0x09, 0xce, 0xac, 0x3d, 0x27, 0x25, 0xf0, 0xc7, 0x2d, 0x9a, 0x4a, 0x58,
	0x22, 0x3b, 0x86, 0xdd, 0xcf, 0x06, 0x35, 0xdf, 0x71, 0x02, 0x48, 0xdd, 0x1b, 0x2c, 0x22, 0x1c,
	0xce, 0x5e, 0xc0, 0xde, 0x15, 0xea, 0x9f, 0xf9, 0x02, 0x79, 0xfc, 0x80, 0xd2, 0x5c, 0x0d, 0xff,
	0xc6, 0xf0, 0xf8, 0x9e, 0x7b, 0xf6, 0x14, 0x3a, 0x96, 0x74, 0x3e, 0x73, 0xc9, 0xf4, 0x84, 0x3f,
	0xb1, 0x01, 0x24, 0x5e, 0xf6, 0x49, 0x16, 0xe8, 0x02, 0xf7, 0x44, 0x08, 0xb1, 0x63, 0x80, 0x0b,
	0xac, 0x6e, 0x28, 0x73, 0x84, 0xd8, 0x11, 0x02, 0x84, 0x1d, 0x41, 0xef, 0x3a, 0x2f, 0xd0, 0x54,
	0xb2, 0x58, 0xf1, 0xdd, 0x41, 0x34, 0x3a, 0x10, 0x2d, 0x60, 0x6f, 0x5d, 0x2a, 0x53, 0xca, 0x90,
	0x3f, 0xaa, 0x6f, 0xd7, 0x00, 0x1b, 0xc2, 0xbe, 0x3b, 0x5c, 0xa0, 0x31, 0x52, 0x21, 0xef, 0x38,
	0xef, 0x1b, 0x98, 0x8d, 0x3f, 0x27, 0xd5, 0x30, 0xf6, 0xea, 0xf8, 0x2d, 0xc2, 0xde, 0x41, 0xd7,
	0x9b, 0x86, 0x77, 0x07, 0xf1, 0x28, 0x99, 0x3c, 0x4f, 0xdb, 0x56, 0x7e, 0x68, 0x2c, 0xcf, 0x99,
	0x61, 0x25, 0xf3, 0xa5, 0x58, 0x4b, 0x6c, 0x82, 0xbe, 0x46, 0xe7, 0x33, 0xde, 0x73, 0xde, 0x5b,
	0x80, 0x4d, 0xe0, 0x70, 0x2a, 0x97, 0xcb, 0xbc, 0x54, 0x4d, 0xdd, 0xe1, 0x41, 0xdd, 0xef, 0x31,
	0xd8, 0x09, 0x74, 0xdc, 0x03, 0x0c, 0x4f, 0x1c, 0x97, 0xa7, 0xed, 0x8c, 0x7c, 0x14, 0x97, 0xd3,
	0xba, 0x35, 0xb9, 0xa9, 0x84, 0xe7, 0x0d, 0xe7, 0x70, 0x28, 0x50, 0x66, 0x41, 0xbb, 0xea, 0x47,
	0x9b, 0x6b, 0xba, 0xc2, 0x32, 0x73, 0x2d, 0x3b, 0x10, 0x01, 0xc2, 0xfa, 0xd0, 0xf5, 0xe1, 0x0c,
	0xdf, 0x19, 0xc4, 0xa3, 0x9e, 0x58, 0x9f, 0x27, 0x7f, 0x22, 0x48, 0x9a, 0xf6, 0x2b, 0xd4, 0xec,
	0x35, 0xc4, 0x76, 0x16, 0xb7, 0x8e, 0x5f, 0x7f, 0x3f, 0xf5, 0xdb, 0xf5, 0x85, 0xf2, 0x8c, 0x9d,
	0xc2, 0x9e, 0x4f, 0x88, 0x3d, 0xdb, 0x90, 0x6d, 0xa6, 0xd9, 0x7f, 0xb2, 0x71, 0xd9, 0x8c, 0xfd,
	0x49, 0xf4, 0x7e, 0x04, 0x2f, 0x4b, 0xac, 0xc2, 0xd5, 0xf1, 0xcb, 0x64, 0xb7, 0x27, 0x14, 0x7d,
	0xed, 0xb8, 0xb5, 0x79, 0xf3, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x8c, 0xa1, 0x8b, 0x08, 0x4e, 0x04,
	0x00, 0x00,
}
